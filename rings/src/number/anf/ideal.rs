use crate::structure::{IdealArithmeticStructure, IdealStructure};

use super::ring_of_integers::{
    RingOfIntegersWithIntegralBasisElement, RingOfIntegersWithIntegralBasisStructure,
};

// Ideals in ring of integers are generated by at most 2 elements
pub enum RingOfIntegersIdeal {
    Principal {
        generator: RingOfIntegersWithIntegralBasisElement,
    },
    General {
        first_generator: RingOfIntegersWithIntegralBasisElement,
        second_generator: RingOfIntegersWithIntegralBasisElement,
    },
}

impl IdealStructure for RingOfIntegersWithIntegralBasisStructure {
    type Ideal = RingOfIntegersIdeal;
}

impl IdealArithmeticStructure for RingOfIntegersWithIntegralBasisStructure {
    fn ideal_contains(&self, a: &Self::Ideal, b: &Self::Ideal) -> bool {
        todo!()
    }

    fn ideal_intersect(&self, a: &Self::Ideal, b: &Self::Ideal) -> Self::Ideal {
        todo!()
    }

    fn ideal_add(&self, a: &Self::Ideal, b: &Self::Ideal) -> Self::Ideal {
        todo!()
    }

    fn ideal_mul(&self, a: &Self::Ideal, b: &Self::Ideal) -> Self::Ideal {
        todo!()
    }
}
